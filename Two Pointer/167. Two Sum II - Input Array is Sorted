// if sum is basically less than target, then move the low pointer up which will basically make the sum bigger and if it is smaller make high pointer -1 which will decrease size of the sum 
// Time complexity : O(n)
// Space Complexity : O(1)

class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int low = 0;
        int high = numbers.length-1;
        int result[] = {0,0};

        while(low<high){
            if(numbers[low]+numbers[high]==target){
                result[0]=low+1;
                result[1]=high+1;
                
            }
            
            else if(numbers[low]+numbers[high]<target){
                low = low+1;
            }
            else if(numbers[low]+numbers[high]>target){

            high = high -1;

            }
        }

        if(result[0]==0 && result[1]==0){
            return new int[2];
        }
        return result;
    }
}
